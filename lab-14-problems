#include <bits/stdc++.h>
using namespace std;
#define int long long
#define sz(x) long((x).size())
#define all(x) (x).begin(), (x).end()
void solve(){
    // porblem and number
}
signed main(){
    //in();
    cin.tie(0)->sync_with_stdio(0);
    int t; t = 1;
    //cin >> t;
    while(t--) solve();
}
/*
void pr1(){
        map<int, int> m;
    for(int i = 1; i < 6; i++) m[i] = i * i;
    for(auto x:m) cout << x.first << ' ' << x.second << '\n';
}
void pr2()
{
    int cnt = 1;
    map<int, string> mp = {{74,"Mike"},{76,"Elena"},{93,"David"},{70,"George"},{89,"Indra"}};
    for(auto x:mp) cout << cnt ++ << " place is " << x.second << '\n';
}
void pr3()
{
    map<char, int> mp;
    for(char i = 'A'; i <= 'Z'; i++) mp[i] = (i - 'A' + 1);
    char c; cin >> c; cout << mp[c];
}
void pr4(){
    map<int, double> mp = {{4,7.5},{25,6.01},{-9,3.2},{12,5.16}};
    for(auto x:mp) cout << x.first << ' ' << x.second << '\n'; cout << '\n';
    mp.insert({3,3.75});
    for(auto x:mp) cout << x.first << ' ' << x.second << '\n'; cout << '\n';
    auto it = mp.find(12); cout << it->first << ' ' << it->second << '\n'; cout << '\n';
    mp.erase(12);
    for(auto x:mp) cout << x.first << ' ' << x.second << '\n'; cout << '\n';
    mp[-9] = 4.44;
    for(auto x:mp) cout << x.first << ' ' << x.second << '\n'; cout << '\n';
}
void printing(pair<string, int> pr){
    cout << pr.first << ' ' << pr.second << '\n';
}
void pr5()
{
    unordered_map<string, int> mp = {{"Earth",3}, {"Mercury",1},{"Venus",2}};
    for_each(mp.begin(), mp.end(), printing); cout << '\n';
    mp.insert({"Mars", 4});
    for_each(mp.begin(), mp.end(), printing); cout << '\n';
    mp.insert({"Saturn",6});
    mp.insert({"Neptune",8});
    for_each(mp.begin(), mp.end(), printing); cout << '\n';
    cout << mp.size();
    mp.erase("Venus");
    for_each(mp.begin(), mp.end(), printing); cout << '\n';
}
void pr6()
{
    multimap<int, int> mp = {{100,3}, {150,4}, {100,90}};
    cout << mp.count(100) << '\n';
    mp.insert({200, 32});
    mp.insert({100, -12});
    mp.insert({90, 45});
    cout << mplower_bound(100)->first;
}
void pr7()
{
    int n; cin >> n;
    map<string, int> mp;
    for(int i = 0; i < n; i++){
        string s; cin >> s;
        mp[s] ++;
        if(mp[s] > 1) cout << s << mp[s]-1 << '\n';
        else cout << "OK\n";
    }
}
void pr8()
{
    int n; cin >> n;
    map<int, int> mp;
    set<int> st;
    for(int i = 0; i < n; i++){
        int x; cin >> x;
        st.insert(x);
        mp[x] ++;
    }
    bool check = 1;
    for(auto x:st) if(mp[x] != x) check = 0;
    cout << (check ? "Good" : "Not good") << " sequence\n";
}
void show(set<int> s)
{
    for(auto it = s.begin(); it != s.end(); it ++) cout << *it << ' ';
}
void pr9()
{
    set<int> s;
    vector<int> vec = { 5, 39, 10, 64, 82, 35, 10, 54 };
    for(auto x:vec) s.insert(x);
    show(s);
}
void show(unordered_set<int> s){
    for(auto it = s.begin(); it != s.end(); it ++) cout << *it << ' ';
}
void pr10()
{
    unordered_set<int> s;
    vector<int> vec = {5, 39, 10, 64, 82, 35, 10, 54};
    for(auto x:vec) s.insert(x);
    show(s);
}
void show(multiset<int> s){
    for(auto it = s.begin(); it != s.end(); it ++) cout << *it << ' ';
}
void pr11()
{
    multiset<int> s;
    vector<int> vec = { 5, 39, 10, 64, 82, 35, 10, 54 };
    for(auto x:vec) s.insert(x);
    show(s); cout << '\n';
    for(auto x:s) cout << x << ' '; cout << '\n';
    for(int i = 10; i <= 54; i++) s.erase(i);
    show(s);
}
void pr12()
{
    multiset<int> st;
    srand(time(0));
    for(int i = 0; i < 10; i++){
        int r = rand() % 9 + 11;
        st.insert(r);
    }
    int n; cin >> n;
    if(st.count(n) > 1) cout << "YES";
    else for(auto x:st) cout << x << ' ';
}
void pr13()
{
    int n; cin >> n;
    set<int> st, mp, un;
    for(int i = 0; i < n; i++){
        int x; cin >> x;
        st.insert(x);
    }
    for(int i = 0; i < n; i++){
        int x; cin >> x;
        mp.insert(x);
    }
    int l = 0, r = 0;
    vector<int> in, df;
    while(1){
        set<int>::iterator its, itm;
        its=st.begin();
        itm=mp.begin();
        advance(its,l);
        advance(itm,r);
        if(l == n && r == n) break;
        if(l == n){
            df.push_back(*itm);
            r ++;
        }
        else if(r == n){
            df.push_back(*its);
            l ++;
        }
        else if(*its == *itm){
            in.push_back(*its);
            l ++; r ++;
        }
        else if(*its > *itm){
            df.push_back(*itm);
            r ++;
        }
        else{
            df.push_back(*its);
            l ++;
        }
        un.insert(*itm);
        un.insert(*its);
    }
    for(auto x:un) cout << x << ' '; cout << '\n';
    for(auto x:in) cout << x << ' '; cout << '\n';
    for(auto x:df) cout << x << ' '; cout << '\n';
}
void pr14()
{
    int n; cin >> n;
    vector<int> vec(n);
    set<int> st;
    for(auto &x:vec){ cin >> x; st.insert(x); }
    vector<int> arr(all(st));
    cout << arr.size() << '\n';
    for(auto x:arr) cout << x << ' ';
}
void pr15(){
    int q; cin >> q;
    string s; cin >> s;
    vector<char> vec;
    for(auto c:s) vec.push_back(c);
    while(q--){
        int i, j, k; cin >> i >> j >> k;
        sort(vec.begin() + i - 1, vec.begin() + j);
        if(!k) reverse(vec.begin() + i - 1, vec.begin() + j);
    }
    for(auto x:vec) cout << x;
}
void pr16()
{
    string s;
    int n; cin >> n;
    vector<int> vec(n); for(auto &x:vec) cin >> x;
    sort(vec.begin(), vec.end());
    for(int x:vec){
        x %= 10;
        s += ('0' + x);
    }
    string a = s; reverse(s.begin(), s.end());
    cout << (a == s ? "Symmetric" : "Not symmetric") << '\n';
    for(auto x:vec) cout << x << ' ';
}
void prit(queue<int> q){
    while(!q.empty()){
        cout << q.front() << ' ';
        q.pop();
    }
}
void pr17(){
    vector<int> vec = {5, 3, 10, 32, 95, -4, 29};
    queue<int> q;
    for(int i = 0; i < vec.size(); i++){
        q.push(vec[i]);
    }
    prit(q);
    cout << '\n' << q.size() << '\n' << q.front() << ' ' << q.back();
    q = queue<int>();
}
void pr18(){
    stack<int> st;
    vector<int> vec = { 43, 90, 100, 30, 28, 1, 34 };
    for(auto x:vec){
        st.push(x);
    }
    cout << st.size() << '\n' << st.top() << '\n';
    while(!st.empty() && st.top() != 30) st.pop();
    cout << st.size();
}
*/
